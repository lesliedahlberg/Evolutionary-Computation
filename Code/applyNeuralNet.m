function [output, values] = applyNeuralNet(neuralNet, input)
%applyNeuralNet takes a neural network and applies it to a given input.
%
%  *  `neuralNet` is a cell array of weight matrices generated by
%     `enerateNeuralNet`.
%  *  `input` is a vector of input values the same size as the first layer
%     of the neural network.
%
%  *  `output` is the a vector of the same size as the last layer of the
%     neural network
%  *  `values` contains a cell for each layer of the network, each
%     containing the values the neurons in this layer.

  values = cell(1, length(neuralNet)+1);

  % Save input values into first cell.
  values{1} = input(:)';

  % Apply neural network to input layer by layer.
  for i = 1:length(neuralNet)
    % Application of logistic function.
    values{i+1} = 1./(1+exp(-( values{i}(:)' * neuralNet{i} )));
  end

  % Return output layer values individually.
  output = values{end};
end